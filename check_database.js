const mysql = require('mysql2/promise');
const fs = require('fs');

async function runMigration() {
  const connection = await mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'dorm'
  });

  try {
    console.log('üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const [columns] = await connection.execute('DESCRIBE booking');
    console.log('üìã ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á booking ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    columns.forEach(col => console.log(`  - ${col.Field} (${col.Type})`));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const requiredColumns = [
      'contract_accepted', 'contract_accepted_at', 'payment_slip_url', 
      'payment_slip_uploaded_at', 'payment_deadline', 'manager_approved_at', 
      'manager_approved_by', 'total_price', 'createdAt', 'updatedAt'
    ];
    const existingColumns = columns.map(col => col.Field);
    const missingColumns = requiredColumns.filter(col => !existingColumns.includes(col));
    
    if (missingColumns.length > 0) {
      console.log('‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:', missingColumns);
      console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå...');
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
      const alterStatements = [
        "ALTER TABLE `booking` ADD COLUMN `contract_accepted` TINYINT(1) DEFAULT 0",
        "ALTER TABLE `booking` ADD COLUMN `contract_accepted_at` DATETIME NULL",
        "ALTER TABLE `booking` ADD COLUMN `payment_slip_url` VARCHAR(255) NULL",
        "ALTER TABLE `booking` ADD COLUMN `payment_slip_uploaded_at` DATETIME NULL",
        "ALTER TABLE `booking` ADD COLUMN `payment_deadline` DATETIME NULL",
        "ALTER TABLE `booking` ADD COLUMN `manager_approved_at` DATETIME NULL",
        "ALTER TABLE `booking` ADD COLUMN `manager_approved_by` INT(11) NULL",
        "ALTER TABLE `booking` ADD COLUMN `total_price` DECIMAL(10,2) NULL",
        "ALTER TABLE `booking` ADD COLUMN `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP",
        "ALTER TABLE `booking` ADD COLUMN `updatedAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"
      ];
      
      for (const statement of alterStatements) {
        try {
          await connection.execute(statement);
          console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (err) {
          if (err.message.includes('Duplicate column')) {
            console.log('‚ö†Ô∏è ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
          } else {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err.message);
          }
        }
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° Foreign Key
      try {
        await connection.execute(`
          ALTER TABLE \`booking\` 
          ADD CONSTRAINT \`fk_booking_manager\` 
          FOREIGN KEY (\`manager_approved_by\`) 
          REFERENCES \`member\` (\`mem_id\`) 
          ON DELETE SET NULL 
          ON UPDATE CASCADE
        `);
        console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Foreign Key ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } catch (err) {
        if (!err.message.includes('Duplicate')) {
          console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Foreign Key:', err.message);
        }
      }
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
      await connection.execute(`
        UPDATE \`booking\` 
        SET 
          \`createdAt\` = \`booking_date\`,
          \`updatedAt\` = \`booking_date\`
        WHERE \`createdAt\` IS NULL OR \`updatedAt\` IS NULL
      `);
      
      console.log('üéâ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
    } else {
      console.log('‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    const [newColumns] = await connection.execute('DESCRIBE booking');
    console.log('üìã ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á migration:');
    newColumns.forEach(col => console.log(`  - ${col.Field} (${col.Type})`));
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    process.exit(1);
  } finally {
    await connection.end();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  }
}

runMigration();
